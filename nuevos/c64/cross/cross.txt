[FOTOS 0]
Quetzalcoatl 2.0a4[AZULCLARO GRANDE]
[PCT BLANCO NO]




  Pues existen varias formas de programar para una m quina C64:

   - Compilador o int‚rprete en m quina real.[PC GRIS]
   - Compilador o int‚rprete en m quina emulada.
   - Compilador cruzado.

  Por supuesto, la forma m s r pida es la de usar el propio lenguaje BASIC, que[PCT IZQUIERDA BLANCO]
lleva incorporado la m quina real o la emulada (desde PC). Sin embargo, esta no
ser  la forma m s eficiente de programar y sacar el m ximo rendimiento a la
m quina C64.[NO]


  Sin embargo, surge el problema, de que mucha gente (entre ellos yo), no posee[IZQUIERDA]
la m quina real C64, o que tampoco posea suficientes perif‚ricos adaptados para
hacer un buen uso de dicha m quina.[NO]
  Por tanto, para estas personas, es mejor el uso de un compilador cruzado, es[IZQUIERDA]
decir, un compilador de C, PASCAL o ensamblador que permite ser compilado en
una m quina distinta al C64, como es el caso de un PC.[NO]


  Esto existe desde hace much¡simo tiempo, y es aplicable a m quinas APPLE,[IZQUIERDA]
AMIGA, CPC, C64, GB, PSOne, PSX, PS2, GC, NES, SNES, N64, etc... Es m s, hasta
existe un compilador cruzado para m quinas[NO BLANCO] ITANIUM de 64 bits.[AZULCLARO]


  Si queremos buscar por la red, debemos de especificar la palabra: "cross[IZQUIERDA BLANCO]
compiler", ya que es raro encontrar algo en espa¤ol.[NO]


  Hay que recordar, que el uso de los emuladores, muchas veces, no permite[IZQUIERDA]
aprovechar al 100% la m quina real (ya que no la emula al 100%), pero eso no
impide, que se pueda programar desde una m quina m s r pidamente (PC, PPC,
SUN), para luego pasarlo a la m quina real, la cual se emulaba. Esto permite,
una mayor "depuraci¢n c¢moda", a la hora de enviarlo a la m quina real.[NO]


  Adem s para aquel que quiera conseguir la m quina real, que mejor, que probar
,aunque sea un poco, la emulada, y luego buscar la real, como si fuera un[IZQUIERDA]
preview.[NO]






C64[AMARILLO GRANDE]
[PCT BLANCO NO]


  Para el caso del C64, he optado por coger el compilador cruzado Quetzalcoatl,
en su versi¢n 2.0a4. Se encuentra disponible, para las siguiente plataformas:

   - DOS[PC GRIS]
   - WINDOWS
   - LINUX

  Recomiendo la versi¢n para DOS, para aquellos equipos que no sean muy[IZQUIERDA PCT BLANCO]
r pidos, o que tengan pocos recursos. Si no es ese vuestro caso, pod‚is usar la
versi¢n para WIN32, la cual s¢lo hace uso de la ventana del DOS de Windows en
modo terminal.[NO]


  Junto a este compilador, viene una serie de documentos de las caraster¡sticas
del mismo, as¡ como t‚cnicas de programaci¢n simple y avanzada. Se agradece que
venga en formato TXT (para pocos recursos) y PDF (para lo contrario).


  Por cierto, este compilador es para C est ndar, pero tambi‚n incluye una[IZQUIERDA]
opci¢n para el uso de ensamblador Z80. Si opt is por la primera opci¢n (c),
notar‚is que es bastante f cil de programar, sobre todo si ya ten is nociones
sobre ello, sin falta de saber ensambla. Sin embargo, aparecen varios
problemas, que son:[NO]

  - El ejecutable es como m¡nimo de 1 KB.[PC GRIS]
  - No esta optimizado el binario resultante en velocidad.

  Esto nos permitir  hacer binarios de forma r pida y m s veloces que en BASIC,[PCT BLANCO IZQUIERDA]
sin embargo, no nos permitir  hacer verdaderas obras de arte de la
programaci¢n, como el uso de puro ensamblador.[NO]

  Pero como ventaja est :

   - Poder usar las librer¡as de E/S, matem ticas y dem s con tan s¢lo 1 KB.[PC GRIS]
   - Inclusi¢n de un cargador para BASIC.

  El uso de ensamblador funciona perfectamente, ya que lo he probado, sin[PCT BLANCO IZQUIERDA]
embargo, hay que tener en cuenta algunos cambios de sintaxis, que son mezcla
del TASM y derivados.[NO]

  Pero como inconveniente, est  que tenemos que implementar todas las rutinas[IZQUIERDA]
que no posea nuestro programa, y que necesitemos, as¡ como que habr  que
especificar la zona de memoria a cargar nuestro programa, ya que no se posee el
cargador de BASIC.[NO]





Primer programa[AMARILLO GRANDE]
[PCT BLANCO NO]


  Junto al paquete del compilador cruzado, nos vienen una serie de programas[IZQUIERDA]
hechos en C, para poder ser compilados.[NO]
  Pero vamos a intentar realizar nuestro primer programilla. Para ello,[IZQUIERDA]
necesitaremos, lo siguiente:[NO]

   - Las librer¡as del compilador cruzado -->[AMARILLO PC] quetzalcoatl-base-2.0a4.zip[BLANCO]
   - El compilador -->[AMARILLO] quetzalcoatl-dos-2.0a4.zip[BLANCO]
                       quetzalcoatl-linux-2.0a4.zip
                       quetzalcoatl-linuxRH7-2.0a4.zip
                       quetzalcoatl-win32-2.0a4.zip
   - Un emulador de C64 -->[AMARILLO] Ccs64_32[BLANCO]
   - Ganas de programar m quinas raras.[AMARILLO]

  Si por alg£n motivo hay alg£n error en los binarios resultantes, siguiendo[PCT BLANCO IZQUIERDA]
estos pasos, pod‚is descargar un patch que soluciona alg£n que otro problema:[NO]

         quetzalcoatl-patch-20a4m1.zip[CHAR14B VERDEFOSFORITO]


  Pues ahora, procederemos a habrir un archivo de texto en formato ASCII, por[PCT BLANCO IZQUIERDA]
ejemplo con el EDIT o con el NOTEPAD, de tal forma que escribimos lo siguiente:[NO]


   void main (void){[AMARILLO]
     cout << "Hola TOC-DOC\n";
   }


  Despu‚s de dar a grabar, procederemos a ejecutar el siguiente comando:[BLANCO]
  
    quetzdos -b prueba.c -r c64[AMARILLO]

  o bien, este otro:[BLANCO]

    quetzdos -fbT prueba.c -r c64[AMARILLO]

  Este ser¡a el caso de haber usado el compilador de la versi¢n de DOS y que[BLANCO IZQUIERDA]
el fichero se llamase prueba.c y con cargador de BASIC (opci¢n -b). Hay que
acordarse de la opci¢n (-r c64), ya que nos permitir  usar binarios para la
m quina C64. En el acto se nos crear  un ejecutable de las siguiente
caracter¡sticas:[NO]

   - 14 bytes de datos de nuestra cadena de texto "Hola TOC-DOC"[PC GRIS]
   - 1404 bytes de las librer¡as
   - A¤adido el cargador de BASIC que comienza en la direcci¢n 2048


  En total, nos ha quedado un binario de 1432 bytes (1,3 KB), la verdad[PCT BLANCO IZQUIERDA]
bastante peque¤o, comparado con los de WIN32.[NO]
  Ahora si queremos probar nuestro binario resultante, debemos de cargar el[IZQUIERDA]
emulador de C64, y decirle que coja el binario prueba.bin que se nos ha creado
por defecto.[NO]

  Pero claro, hay un peque¤o problema, y es debido a que muchos emuladores,[IZQUIERDA]
s¢lo tienen soporte para archivos de programa con extensi¢n .PRG. Por tanto,
para ello, procederemos a renombrar el archivo prueba.bin por este otro
prueba.prg.[NO]

  Otra opci¢n m s sencilla, ser¡a la siguiente:

    quetzdos -fbT prueba.c -r c64 -o prueba.prg[AMARILLO]

  Y en el acto, debemos de poder observar el mensaje "Hola TOC-DOC" por[BLANCO IZQUIERDA]
pantalla.[NO]

  Otra opci¢n de cargar el programa, ser¡a cargar el binario "prueba.prg", de[IZQUIERDA]
la siguiente forma:[NO]

  load "prueba.prg"[AMARILLO]

  Y despu‚s:[BLANCO]

  sys 3466[AMARILLO]





Avanzado[AMARILLO GRANDE]
[PCT BLANCO NO]


  Ha muchos de vosotros, se os habr  iluminado una luz interna en la cabeza,[IZQUIERDA]
al hacer este peque¤o programa. Y quiz s a otros, se les haya activado los
recuerdos de cuando trabajaban con el C64. As¡, que para todo aquel que quiera
volver a realizar cosas para C64, que mejor que usar una m quina que nunca se
romper , ya que es virtual, pudiendo en el mejor de los casos, poder llevar
nuestros trabajos al C64 real.[NO]


  Pero hacer un simple "Hola TOC-DOC", no equivale a realizar una demo, pero[IZQUIERDA]
claro, por algo se empieza. As¡ que vamos continuar con la saga, y pasaremos
a la memoria de video.[NO]


  Para aquel que no lo sepa, programar para C64 se parece mucho a la[IZQUIERDA]
programaci¢n de una consola, es decir, se trata de un hardware empotrado, en
donde para acceder a sus caracter¡sticas hardware, se accede a posiciones de
memoria o puertos.[NO]


  Por tanto, vamos a empezar con un ejemplo visual sencillo, que consiste, en[IZQUIERDA]
cambiar de color el fondo del video. Para ello, procederemos en dos versiones,
primero en BASIC y luego con el compilador cruzado. La raz¢n de usar BASIC, es
para aquellos usuarios y coders de C64, que no tienen muy claro el uso del
compilador cruzado.[NO]


  Por tanto, en BASIC, teclear¡amos, lo siguiente:

   POKE 53280,0[AMARILLO]

  En el acto observaremos, como cambia el color del borde de pantalla a un[IZQUIERDA BLANCO]
valor negro. Esto se debe, a que la m quina C64 posee un mapeo de memoria de
registros, de tal forma, que la posici¢n de memoria 53280 corresponde al color
del borde de pantalla.[NO]


  El siguiente ejemplo de c¢digo:

   10 FOR i=0 TO 15[AMARILLO]
   20 POKE 53280,i
   30 NEXT i
   40 GOTO 10

  Vemos como el color del borde cambia a todos los colores posibles, que en[IZQUIERDA BLANCO]
este caso, son 16. Como podr‚is observar, es muy parecido, a cuando se carga
una cinta o un programa. As¡ que ya ten‚is el efecto.[NO]
  Si en alg£n momento quer‚is parar el bucle repetitivo, pod‚is dar a la tecla[IZQUIERDA]
ESC.[NO]

  Para aquel, que no sepa la tabla de colores, aqu¡ os dejo una:

  0   NEGRO            8    NARANJA[PC GRIS]
  1   BLANCO           9    MARRON
  2   ROJO            10    ROJO BRILLANTE
  3   CIAN            11    GRIS 1
  4   PURPURA         12    GRIS 2
  5   VERDE           13    VERDE BRILLANTE
  6   AZUL            14    AZUL BRILANTE
  7   AMARILLO        15    GRIS 3

  Un detalle, de esto, que en este caso es importante, es que el C64 posee los[BLANCO PCT IZQUIERDA]
siguientes colores:[NO]

  BLANCO, GRIS 1, GRIS 2, GRIS 3 y NEGRO. Es decir, tenemos 2 colores directos[IZQUIERDA]
(blanco y negro) y 3 de escala (grises). Esto nos permitir  hacer peque¤os
efectos de im genes de gran calidad, ya que con 5 tonalidades se puede realizar
una buena digitalizaci¢n.[NO]

  Y ahora, seguimos adelante, con otro efecto:

   POKE 53281,0[AMARILLO]

  Esto sigue el mismo esquema que el color del borde, pero en este caso, del[IZQUIERDA BLANCO]
fondo de pantalla. Por tanto, cambiaremos el color AZUL por el negro. Por
vuestra cuenta, pod‚is hacer un bucle del mismo estilo que el anterior.[NO]

  Hay que destacar, que de la misma forma que se hace un POKE (escribir en[IZQUIERDA]
memoria), se puede hacer un PEEK (leer de memoria), de tal forma, que si
queremos saber el color de fondo, haremos lo siguiente:[NO]

   10 a = PEEK (53281)[AMARILLO]
   20 print a

  Y para saber el color, tendremos que hacer operaciones AND l¢gicas con el[BLANCO IZQUIERDA]
color en concreto:[NO]

  a AND 0 --> para saber si es el negro[AMARILLO]


  Si queremos hacer esto mismo, es decir, cambiar el color del borde y fondo[IZQUIERDA BLANCO]
de pantalla, con el compilador cruzado, escribiremos algo similar a esto:[NO]

  void main(void){[AMARILLO]
   memory[[53280] = 0; //Pone a negro el borde de pantalla
  }

  El ejecutable resultante ocupar  1415 bytes.[BLANCO]

  Como se puede apreciar, si usamos la palabra reservada "memory" en modo[IZQUIERDA]
ARRAY, podremos acceder a todo el espacio de direcciones de memoria del C64.[NO]


  Si queremos cambiar el fondo, pondremos:

   void main(void){[AMARILLO]
    memory[[53281] = 0; //Pone a negro el fondo de pantalla
   }

  Al igual que el anterior, ocupa 1415 bytes.[BLANCO]





Escribir por pantalla[AMARILLO GRANDE]
[PCT BLANCO NO]


  Despu‚s de la introducci¢n anterior, ira siendo hora de meternos a escribir[IZQUIERDA]
directamente en pantalla.[NO]
  Antes de todo, hay que explicar como se encuentra distribuida la memoria de[IZQUIERDA]
video en el C64. Para aquel que no lo sepa, el C64 soporta 40 x 25 caracteres,
es decir, 40 columnas y 25 filas. Por tanto, con 1000 bytes, tendremos definida
toda la zona de memoria de video.[NO]
  Al igual que los PC's (de acuario), el C64 trabaja con bytes, y por tanto,[IZQUIERDA]
cada posici¢n de memoria (car cter), ocupa un byte. Es decir, cada posici¢n de
memoria puede tener 256 posibilidades de caracteres. Como sabr‚is, el
abecedario espa¤ol, se compone de 28 caracteres. Por tanto, hasta 256
caracteres, nos quedan muchos que pueden ser usados como caracteres gr ficos.[NO]
  No obstante, aunque existan 28 letras, tambi‚n se poseen otras 28 homologas,[IZQUIERDA]
pero en min£sculas.[NO]

  La zona de memoria de video, comienza en la posici¢n 1024. Y cada l¡nea de[IZQUIERDA]
video, tal y como se coment¢, posee 40 columnas (bytes), por tanto, la
siguiente l¡nea comenzar  en la posici¢n 1064 (1024 + 40). Y as¡ sucesivamente.[NO]

  La £ltima fila, comienza en la posici¢n 1984. Por tanto, tenemos que la[IZQUIERDA]
memoria de video, comienza en la posici¢n 1024 y acaba en la 2023.[NO]
  Por tanto, si queremos dibujar un car cter en una posici¢n dada, ser¡a:

   posicion = 1024 + columna + (40 * fila)[AMARILLO]


  Comparando esta t‚cnica con la de los CPC's, la verdad que es muy c¢moda, si[IZQUIERDA BLANCO]
se sabe lo que se hace.[NO]


  Entonces, visto lo anterior, si queremos poner un car cter "A" en las[IZQUIERDA]
coordenadas 1,5, proceder¡amos de la siguiente forma:[NO]

   posicion = 1024 + 1 + (40 * 5)[AMARILLO]
   posicion = 1024 + 1 + 200
   posicion = 1225

  Por tanto, procederemos de la siguiente forma:[BLANCO]

   POKE 1225,1[AMARILLO]

  Para aquellos que no lo sepan, mientras que en PC, el car cter "A"[BLANCO IZQUIERDA]
corresponde al c¢digo ASCII 65, en el C64, la "A" es el c¢digo 1.[NO]

  Si queremos llenar la pantalla de "A", haremos lo siguiente:

   10 FOR i=1024 TO 2023[AMARILLO]
   20  POKE i,1
   30 NEXT I


  Y una vez visto la escritura de caracteres, podemos ver, como van organizados[BLANCO IZQUIERDA]
los colores.[NO]

  La zona de memoria del color, comienza en la 55296 y acaba en 56295. Sigue el[IZQUIERDA]
mismo esquema que en los caracteres, es decir, posee 1000 posiciones (bytes)
que se corresponden con el color del car cter de la zona de memoria de los
mismos. Es decir, si queremos dejar de color negro el car cter A situadao en
las coordenadas 1,5, pondr¡amos:[NO]

   posicion = 55296 + 1 + (40 * 5)[AMARILLO]
   posicion = 55296 + 1 + 200
   posicion = 55497

   POKE 55497,0

  Y si queremos llenar un trozo de la pantalla de colorines y de caracteres[BLANCO IZQUIERDA]
variados, pondremos:[NO]

   10 FOR i=0 TO 200[AMARILLO]
   20  POKE 1024+i,i
   30  POKE 55296+i,i
   40 NEXT i


  Si quisi‚ramos llenar la pantalla de "A"  con el compilador cruzado,[BLANCO IZQUIERDA]
tendr¡amos que hacer lo siguiente:[NO]

  
   int i;[AMARILLO]
   void main(void){
    for (i=1024;i<=2023;i++)
     memory[[i] = 1;
   }

  El binario resultante ocupa nada m s y nada menos que 1485 bytes.[BLANCO IZQUIERDA]
Como podr‚is observar, la velocidad de ejecuci¢n del binario es mucho mayor
que en el BASIC interpretado, as¡ que a m s de uno, ya le estar  entrando
ganas de probar en serio este compilador para crear programas, demos y juegos
para el C64 real.[NO]


  Y para el £ltimo ejemplo, pondr¡amos algo similar a esto:

   int i,j;[AMARILLO]
   void main(void){
    for (i=0;i<=200;i++){
     memory[[1024+i],I
     memory[[55296+i],i
    }
   }

  Ahora el ejecutable ocupa 1536 bytes.[BLANCO]





Conclusion[AMARILLO GRANDE]
[PCT BLANCO NO]


  Pues hasta aqu¡ el art¡culo de hoy, de c¢mo programar en C64 con un[IZQUIERDA]
compilador cruzado. En pr¢ximos art¡culos se ver n m s cosas que se pueden
hacer para esta plataforma (C64), entre ellas, el uso de sprites y el sonido.[NO]

  Pero hasta entonces, a esperar y a probar lo que hay en este art¡culo.
